openapi: 3.0.1
info:
  title: TopCoder Model API v5
  description: |
    ## Pagination
    - Requests that return multiple items will be paginated to 20 items by default.
    - You can specify further pages with the `page` parameter (1 based).
    - You can also set a custom page size up to 100 with the `perPage` parameter.
    - Pagination response data is included in http headers.
    - By default, the response header contains links with `next`, `last`, `first`, `prev` resource links.
  version: 1.0.0
servers:
- url: https://api.topcoder.com/v5/model-api/dynamodb
- url: https://api.topcoder-dev.com/v5/model-api/dynamodb
paths:
  /cats:
    get:
      tags:
      - Cats
      description: |
        List cats.
      parameters:
      - name: page
        in: query
        description: The page number.
        schema:
          type: integer
          default: 1
      - name: perPage
        in: query
        description: The number of items to list per page.
        schema:
          maximum: 100
          type: integer
          default: 20
      - name: name
        in: query
        description: Filter by name, case sensitive, exact match is used
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Next-Page:
              description: The index of the next page
              schema:
                type: integer
            X-Prev-Page:
              description: The index of the previous page
              schema:
                type: integer
            X-Per-Page:
              description: The number of items to list per page
              schema:
                type: integer
            X-Total:
              description: The total number of items
              schema:
                type: integer
            X-Total-Pages:
              description: The total number of pages
              schema:
                type: integer
            X-Page:
              description: The index of the current page (starting at 1)
              schema:
                type: integer
            Link:
              description: Pagination link header.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
      - Cats
      description: |
        Create a new cat.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatData'
        required: true
      responses:
        201:
          description: Created - The request was successful and the resource is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: |
            Conflict. The name is already defined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /cats/{catId}:
    get:
      tags:
      - Cats
      description: Retrieve the cat by id
      parameters:
      - name: catId
        in: path
        description: The id of cat to retrieve
        required: true
        schema:
          type: string
          format: UUID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
      - Cats
      description: Update the cat with the specified id.
      parameters:
      - name: catId
        in: path
        description: The id of cat to update
        required: true
        schema:
          type: string
          format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatData'
        required: true
      responses:
        200:
          description: Updated - The request was successful and the resource is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Conflict. Other record has already used the same name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Cats
      description: Delete cat.
      parameters:
      - name: catId
        in: path
        description: The id of cat to delete
        required: true
        schema:
          type: string
          format: UUID
      responses:
        204:
          description: Deleted successful.
          content: {}
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    patch:
      tags:
      - Cats
      description: |
        Partially update the cat with specified id.  Only the fields that are provided will be updated.
      parameters:
      - name: catId
        in: path
        description: The id of cat to update
        required: true
        schema:
          type: string
          format: UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatData'
        required: true
      responses:
        200:
          description: Updated - The request was successful and the resource is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        400:
          description: Bad request.  Request parameters were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: |
            Conflict. Other record has already used the same name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: body
  /health:
    get:
      tags:
      - Health
      description: Check health
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required:
                - checksRun
                type: object
                properties:
                  checksRun:
                    type: integer
        503:
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    ErrorModel:
      type: object
      properties:
        message:
          type: string
          description: the error message
    Cat:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
    CatData:
      type: object
      properties:
        name:
          type: string
  parameters:
    page:
      name: page
      in: query
      description: The page number.
      schema:
        type: integer
        default: 1
    perPage:
      name: perPage
      in: query
      description: The number of items to list per page.
      schema:
        maximum: 100
        type: integer
        default: 20
    destroy:
      name: destroy
      in: query
      description: Hard delete the item (Only allowed for admin)
      schema:
        type: boolean
        default: false